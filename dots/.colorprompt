#!/usr/bin/env bash

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt_available=yes;;
esac

if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  # We have color support; assume it's compliant with Ecma-48
  # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
  # a case would tend to support setf rather than setaf.)
  color_prompt_available=yes
else
  color_prompt_available=
fi

curpath() {
  current_path=${PWD/#$HOME/'~'}
  if [ "$current_path" = "~" ]; then
    echo $current_path
  else
    path_parent=${current_path%\/*}
    path_parent_short=`echo $path_parent | sed -r "s|/([^/]{,${path_segment_length}})[^/]*|/\1|g"`
    directory=${current_path##*\/}
    echo "$path_parent_short/"
  fi
}

curdir() {
  current_path=${PWD/#$HOME/'~'}
  if [ "$current_path" != "~" ]; then
    echo "${current_path##*\/}"
  fi
}

colorize() {
  if [ "$color_prompt_available" = yes ]; then
    local text=$1
    local reset=`tput sgr0`
    local color=`tput setaf $2`
    local style=`tput ${3:-"sgr0"}`
    echo "${style}${color}${1}${reset}"
  else
    echo "$1"
  fi
}

git_transform_semaphore() {
  local text="$1"
  local cached=`colorize "•" $c_git_cached`
  local dirty=`colorize "•" $c_git_dirty`
  local untracked=`colorize "•" $c_git_untracked`

  # put at the start the cached changes char (+)
  if [[ "$text" == *"+"* ]]; then
    text="+${text//\+/""}"
  fi

  echo "$text" | sed "s/\*/$dirty/g;s/+/$cached/g;s/%/$untracked/g"
}

git_transform_ps1() {
  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWUNTRACKEDFILES=1
  GIT_PS1_SHOWCOLORHINTS=0

  local ps1="$(__git_ps1 "%s")"
  if [ -z "$ps1" ]; then
    echo ""
		return
	fi

  IFS=" " read -ra ps1array <<< "$ps1"

  local branch="${ps1array[0]}"
  local semaphore_array="${ps1array[@]:1}"
  local semaphore="${semaphore_array[*]}"

  local open_bracket=`colorize "[" $c_git_base`
  local branch_name=`colorize $branch $c_git_base`
  local status=`git_transform_semaphore "$semaphore"`
  local close_bracket=`colorize "]" $c_git_base`

  echo "${open_bracket}${branch_name}${status}${close_bracket} "
}

custom_ps1() {
  local base_path=`colorize "$(curpath)" $c_path_base`
  local directory=`colorize "$(curdir) " $c_path_curdir bold`

  echo "${base_path}${directory}$(git_transform_ps1)"
}

path_segment_length=1
c_path_base=39 # blue
c_path_curdir=45 # cyan
c_git_base=76 # green
c_git_cached=76 # green
c_git_dirty=214 # yellow
c_git_untracked=160 # red

PS1='$(eval "custom_ps1")'
