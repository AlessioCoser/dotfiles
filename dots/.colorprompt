#!/usr/bin/env bash

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt_available=yes;;
esac

if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  # We have color support; assume it's compliant with Ecma-48
  # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
  # a case would tend to support setf rather than setaf.)
  color_prompt_available=yes
else
  color_prompt_available=
fi

curpath() {
    current_path=${PWD/#$HOME/'~'}
    if [ "$current_path" = "~" ]; then
       echo $current_path
    else
       path_parent=${current_path%\/*}
       path_parent_short=`echo $path_parent | sed -r 's|/([^/]{,2})[^/]*|/\1|g'`
       directory=${current_path##*\/}
       echo "$path_parent_short/"
    fi
}

curdir() {
  current_path=${PWD/#$HOME/'~'}
    if [ "$current_path" != "~" ]; then
      echo "${current_path##*\/}"
    fi
}

colorize() {
  if [ "$color_prompt_available" = yes ]; then
    local text=$1
    local reset=`tput sgr0`
    local color=`tput setaf $2`
    local style=`tput ${3:-"sgr0"}`
    echo "${style}${color}${1}${reset}"
  else
    echo "$1"
  fi
}

git_branch_name() {
  echo `git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
}

git_repo_info() {
  echo "$(git rev-parse --git-dir --is-inside-git-dir \
		--is-bare-repository --is-inside-work-tree --show-ref-format \
		--short HEAD 2>/dev/null)"
}

git_status() {
  local cached=""
  git diff --no-ext-diff --cached --quiet || cached=`colorize "•" $green`
  local dirty=""
  git diff --no-ext-diff --quiet || dirty=`colorize "•" $yellow`
  local untracked=""
  if git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' >/dev/null 2>/dev/null; then
    untracked=`colorize "•" $red`
  fi

  local status="${cached}${dirty}${untracked}"

  if [ -z "$status" ]; then
    return
  fi

  echo " $status"
}

build_custom_ps1() {
  local blue=39
  local cyan=45
  local green=76
  local red=160
  local yellow=214

  local base_path=`colorize "$(curpath)" $blue`
  local directory=`colorize "$(curdir) " $cyan bold`

  if [ -z "$(git_repo_info)" ]; then
    echo "${base_path}${directory}"
		return
	fi

  local open_bracket=`colorize "[" $green`
  local branch_name=`colorize $(git_branch_name) $green`
  local close_bracket=`colorize "]" $green`
  local git="${open_bracket}${branch_name}$(git_status)${close_bracket} "

  echo "${base_path}${directory}${git}"
}

PS1='$(eval "build_custom_ps1")'
