#!/usr/bin/env bash

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  # We have color support; assume it's compliant with Ecma-48
  # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
  # a case would tend to support setf rather than setaf.)
  color_prompt=yes
else
  color_prompt=
fi

sps() {
    current_path=${PWD/#$HOME/'~'}
    if [ "$current_path" = "~" ]; then
       echo $current_path
    else
       path_parent=${current_path%\/*}
       path_parent_short=`echo $path_parent | sed -r 's|/([^/]{,2})[^/]*|/\1|g'`
       directory=${current_path##*\/}
       echo "$path_parent_short/"
    fi
}

curdir() {
  current_path=${PWD/#$HOME/'~'}
    if [ "$current_path" != "~" ]; then
      echo "${current_path##*\/}"
    fi
}

source ~/dotfiles/dots/.git_prompt.sh

GIT_PS1_SHOWDIRTYSTATE=1 # yellow
GIT_PS1_SHOWSTASHSTATE=1 # green
GIT_PS1_SHOWUNTRACKEDFILES=1 # red
if [ "$color_prompt" = yes ]; then
    GIT_PS1_SHOWCOLORHINTS=1
    CYAN=`tput setaf 45`;
    GREEN=`tput setaf 34`;
    BLUE=`tput setaf 39`;
    RESET=`tput sgr0`;
    BOLD=`tput bold`;
    PS1='\[${BLUE}\]$(eval "sps")\[${CYAN}\]\[${BOLD}\]$(eval "curdir")\[${RESET}\]$(__custom_git_ps1 " \[${GREEN}\][%s\[${GREEN}\]]\[${RESET}\]") '
else
    PS1='$(eval "sps") $(__custom_git_ps1 "(%s)")'
fi
unset color_prompt
